~ .x %>%
filter(!is.na(value)) %>%
welch_contrast(
data = .,
dv = symp,
groups = groups
c(-1, 1, -1, 1),
c(-1, 1, 0, 0),
c(0, 0, -1, 1)
)
)
)
emotion_inferentials <- ig %>%
select(id_cond, group_cond, symp, symp_only, amusement, anger, hopeful) %>%
gather(key = emotion, value = value, symp, symp_only, amusement, anger, hopeful) %>%
mutate(value = ifelse(emotion %in% c('anger', 'hopeful'), log(value + 1), value)) %>%
group_by(emotion) %>%
nest() %>%
mutate(
contrasts = map(
data,
~ .x %>%
filter(!is.na(value)) %>%
welch_contrast(
data = .,
dv = symp,
groups = groups,
c(-1, 1, -1, 1),
c(-1, 1, 0, 0),
c(0, 0, -1, 1)
)
)
)
emotion_inferentials <- ig %>%
select(id_cond, group_cond, symp, symp_only, amusement, anger, hopeful) %>%
gather(key = emotion, value = value, symp, symp_only, amusement, anger, hopeful) %>%
mutate(value = ifelse(emotion %in% c('anger', 'hopeful'), log(value + 1), value)) %>%
group_by(emotion) %>%
nest() %>%
mutate(
contrasts = map(
data,
~ .x %>%
filter(!is.na(value)) %>%
welch_contrast(
data = .,
dv = value,
groups = groups,
c(-1, 1, -1, 1),
c(-1, 1, 0, 0),
c(0, 0, -1, 1)
)
)
)
emotion_inferentials <- ig %>%
select(id_cond, group_cond, symp, symp_only, amusement, anger, hopeful) %>%
gather(key = emotion, value = value, symp, symp_only, amusement, anger, hopeful) %>%
mutate(value = ifelse(emotion %in% c('anger', 'hopeful'), log(value + 1), value)) %>%
group_by(emotion) %>%
nest() %>%
mutate(
contrasts = map(
data,
~ welch_contrast(
data = filter(., !is.na(value)),
dv = value,
groups = groups,
c(-1, 1, -1, 1),
c(-1, 1, 0, 0),
c(0, 0, -1, 1)
)
)
)
emotion_inferentials
emotion_inferentials$data[[1]]
emotion_inferentials <- ig %>%
select(groups, symp, symp_only, amusement, anger, hopeful) %>%
gather(key = emotion, value = value, symp, symp_only, amusement, anger, hopeful) %>%
mutate(value = ifelse(emotion %in% c('anger', 'hopeful'), log(value + 1), value)) %>%
group_by(emotion) %>%
nest() %>%
mutate(
contrasts = map(
data,
~ welch_contrast(
data = filter(., !is.na(value)),
dv = value,
groups = groups,
c(-1, 1, -1, 1),
c(-1, 1, 0, 0),
c(0, 0, -1, 1)
)
)
)
emotion_inferentials
emotion_inferentials <- ig %>%
select(groups, symp, symp_only, amusement, anger, hopeful) %>%
gather(key = emotion, value = value, symp, symp_only, amusement, anger, hopeful) %>%
mutate(value = ifelse(emotion %in% c('anger', 'hopeful'), log(value + 1), value)) %>%
group_by(emotion) %>%
nest() %>%
mutate(
contrasts = map(
data,
~ welch_contrast(
data = filter(., !is.na(value)),
dv = value,
groups = groups,
c(-1, 1, -1, 1),
c(-1, 1, 0, 0),
c(0, 0, -1, 1)
)
)
) %>%
select(-data)
emotion_inferentials
emotion_inferentials <- ig %>%
select(groups, symp, symp_only, amusement, anger, hopeful) %>%
gather(key = emotion, value = value, symp, symp_only, amusement, anger, hopeful) %>%
mutate(value = ifelse(emotion %in% c('anger', 'hopeful'), log(value + 1), value)) %>%
group_by(emotion) %>%
nest() %>%
mutate(
contrasts = map(
data,
~ welch_contrast(
data = filter(., !is.na(value)),
dv = value,
groups = groups,
c(-1, 1, -1, 1),
c(-1, 1, 0, 0),
c(0, 0, -1, 1)
)
)
) %>%
select(-data) %>%
unnest()
emotion_inferentials
names(ig)
ig <- read.csv(paste0(data_dir, 'intergroup_empathy.csv')) %>%
filter(
suspicious != 1,
familiar_with_method != 1,
inattentive != 1,
wrong_groups != 1
)
ig
ig <- ig %>%
rowwise() %>%
mutate(
symp = mean(c(sympathetic, compassionate, surprised, interested), na.rm = TRUE),
symp_only = mean(c(sympathetic, compassionate), na.rm = TRUE),
anger = mean(c(angry, mad, frustrated), na.rm = TRUE),
amusement = mean(c(amused, entertained), na.rm = TRUE),
oth_amusement = mean(c(happy, amused, entertained), na.rm = TRUE),
oth_anger = mean(c(angry, mad), na.rm = TRUE),
oth_sadness = mean(c(sad, sorrowful), na.rm = TRUE),
targ_power_rev = abs(targ_power - 100),
sit_cont = mean(c(circ_agency, targ_power_rev, noone_power, sit_control))
)
emotion_descriptives <- ig %>%
select(groups, symp, symp_only, anger, amusement, hopeful) %>%
gather(key = emotion, value = value, symp, symp_only, anger, amusement, hopeful) %>%
group_by(groups, emotion) %>%
summarize(
ns = sum(!is.na(value)),
means = mean(value, na.rm = TRUE) %>% round(2),
sds = sd(value, na.rm = TRUE) %>% round(2),
) %>%
ungroup() %>%
mutate(value = paste0(means, ' (', sds, ')\n', 'n = ', ns)) %>%
select(groups, emotion, value) %>%
spread(key = groups, value = value)
library(tidyverse)
library(psych)
library(broom)
data_dir <- '~/Dropbox/Research/Current Projects/Intergroup Empathy/final data/'
pilot <- read.csv(paste0(data_dir, 'intergroup_empathy_pilot.csv'))
ig <- read.csv(paste0(data_dir, 'intergroup_empathy.csv')) %>%
filter(
suspicious != 1,
familiar_with_method != 1,
inattentive != 1,
wrong_groups != 1
)
welch_contrast <- function(..., data = NULL, dv, groups) {
# assign dv and groups if they're in a dataframe
if(!is.null(data)) {
dv <- eval(substitute(dv), data)
groups <- eval(substitute(groups), data)
}
# make sure contrasts are numeric
if (!is.numeric(c(...))) {
return('All contrasts must be numeric')
}
# make sure length of contrasts is correct
contrast_lengths <- lapply(list(...), length)
unique_lengths <- unique(contrast_lengths)
# are contrasts the same length as each other?
if(length(unique_lengths) != 1) {
return('All contrasts must be the same length')
}
# are contrasts the same length as the number of groups?
if (unique_lengths != length(unique(groups))) {
return(
cat(
'Contrasts must be the same length as the number of groups: ', length(unique(groups)), '. \n\nIf this number seems too large, you might have missing data (NA) in your groups.', sep = ''
)
)
}
# compute group stats
means <- by(dv, groups, mean)
vars <- by(dv, groups, var)
Ns <- by(dv, groups, length)
# build contrast matrix and compute contrast values
contrast <- matrix(c(...), nrow = length(list(...)), byrow = TRUE)
colnames(contrast) <- names(means)
rownames(contrast) <- paste0('Contrast ', 1:length(list(...)))
ihat <- contrast %*% means
# t test
df_welch <- (contrast^2 %*% (vars / Ns))^2 / (contrast^2 %*% (vars^2 / (Ns^2 * (Ns - 1))))
se_welch <- sqrt(contrast^2 %*% (vars / Ns))
t_welch <- ihat/se_welch
p_welch <- 2*(1 - pt(abs(t_welch), df_welch))
ci_welch <- qt(.025, df = df_welch)
lb_welch <- ihat - ci_welch * se_welch
ub_welch <- ihat + ci_welch * se_welch
# store t test results in a data frame
t_test <- data.frame(t = t_welch,
df = df_welch,
p = p_welch,
lb_95CI = lb_welch,
ub_95CI = ub_welch
)
t_test <- round(t_test, digits = 3)
# combine it with the contrast matrix
output <- cbind(contrast, t_test)
return(output)
}
pilot <- pilot %>%
rowwise() %>%
mutate(
identif_iv = recode(identification, `1` = 'high', `2` = 'low'),
identif_dv = mean(c(connected, identify, happy_to_be, belong), na.rm = TRUE)
) %>%
ungroup()
pilot_ms <- pilot %>%
group_by(identif_iv) %>%
summarize(
means = mean(identif_dv, na.rm = TRUE) %>% round(2),
sds = sd(identif_dv, na.rm = TRUE) %>% round(2),
ns = n(),
ns_present = sum(!is.na(identif_dv))
)
high_id <- filter(pilot_ms, identif_iv == 'high')
low_id <- filter(pilot_ms, identif_iv == 'low')
pilot_t <- t.test(identif_dv ~ identif_iv, data = pilot) %>%
tidy() %>%
mutate_if(is.numeric, funs(round(., digits = 2)))
ig <- ig %>%
rowwise() %>%
mutate(
symp = mean(c(sympathetic, compassionate, surprised, interested), na.rm = TRUE),
symp_only = mean(c(sympathetic, compassionate), na.rm = TRUE),
anger = mean(c(angry, mad, frustrated), na.rm = TRUE),
amusement = mean(c(amused, entertained), na.rm = TRUE),
oth_amusement = mean(c(happy, amused, entertained), na.rm = TRUE),
oth_anger = mean(c(angry, mad), na.rm = TRUE),
oth_sadness = mean(c(sad, sorrowful), na.rm = TRUE),
targ_power_rev = abs(targ_power - 100),
sit_cont = mean(c(circ_agency, targ_power_rev, noone_power, sit_control))
)
library(tidyverse)
library(psych)
library(broom)
data_dir <- '~/Dropbox/Research/Current Projects/Intergroup Empathy/final data/'
pilot <- read.csv(paste0(data_dir, 'intergroup_empathy_pilot.csv'))
ig <- read.csv(paste0(data_dir, 'intergroup_empathy.csv'))
set.seed(21418)
pilot %>%
select(connected, identify, happy_to_be, belong) %>%
fa.parallel(fm = 'ml', n.iter = 10000) # one factor
ig <- ig %>%
rowwise() %>%
mutate(
comp = mean(c(compassionate, sympathetic), na.rm = TRUE),
anger = mean(c(angry, mad, frustrated), na.rm = TRUE),
amusement = mean(c(amused, entertained), na.rm = TRUE)
) %>%
ungroup()
ig %>%
group_by(group, identification) %>%
summarize(
compassion = mean(comp, na.rm = TRUE),
anger = mean(anger, na.rm = TRUE),
amusement = mean(amusement, na.rm = TRUE)
) %>%
gather(key = emotion, value = value, compassion, anger, amusement) %>%
ggplot(aes(y = value, x = factor(identification, levels = c(1, 2), labels = c('high', 'low')), fill = factor(group, levels = c(1, 2), labels = c('ingroup', 'outgroup')))) +
geom_bar(stat = 'identity', position = 'dodge') +
facet_wrap(~ emotion)
ig
library(rlang)
library(tidyverse)
library(broom)
data.dir <- '~/Dropbox/Positive Empathy/Full study data/' # set your directory where the data are located
lab <- read.csv(paste0(data.dir, 'posemp_labsurvey_JAN2018.csv'), header = TRUE)
lab <- lab %>%
rename_at(vars(contains('PosEmp')), funs(paste0(., '_lab'))) %>%
rename_at(vars(contains('IRI')), funs(paste0(., '_lab'))) %>%
rename_at(vars(contains('Lonely')), funs(paste0(., '_lab'))) %>%
rename_at(vars(contains('PANAS')), funs(paste0(., '_lab')))
lab %>%
group_by(PIN) %>%
filter(n() > 1)
duplicate.mt <- mt %>%
group_by(PIN) %>%
filter(n() > 1) %>%
ungroup %>%
arrange(PIN) %>%
filter(PIN %in% lab$PIN)
mt <- read.csv(paste0(data.dir, 'posemp_masstesting.csv'), header = TRUE)
head(mt)
data.dir <- '~/Dropbox/Positive Empathy/Full study data/' # set your directory where the data are located
lab <- read.csv(paste0(data.dir, 'posemp_labsurvey_JAN2018.csv'), header = TRUE)
mt <- read.csv(paste0(data.dir, 'posemp_masstesting.csv'), header = TRUE)
lab <- lab %>%
rename_at(vars(contains('PosEmp')), funs(paste0(., '_lab'))) %>%
rename_at(vars(contains('IRI')), funs(paste0(., '_lab'))) %>%
rename_at(vars(contains('Lonely')), funs(paste0(., '_lab'))) %>%
rename_at(vars(contains('PANAS')), funs(paste0(., '_lab')))
lab %>%
group_by(PIN) %>%
filter(n() > 1)
duplicate.mt <- mt %>%
group_by(PIN) %>%
filter(n() > 1) %>%
ungroup %>%
arrange(PIN) %>%
filter(PIN %in% lab$PIN)
duplicates.fixed <- duplicate.mt %>%
group_by(PIN) %>%
mutate_if(is.factor, as.character) %>%
mutate_at(vars(contains('PosEmp')), funs(ifelse(n_distinct(.) > 1, NA, .))) %>%
mutate_at(vars(contains('IRI')), funs(ifelse(n_distinct(.) > 1, NA, .))) %>%
mutate_at(vars(contains('Lonely')), funs(ifelse(n_distinct(.) > 1, NA, .))) %>%
mutate_at(vars(contains('PANAS')), funs(ifelse(n_distinct(.) > 1, NA, .))) %>%
ungroup() %>%
distinct(PIN, .keep_all = TRUE) # remove duplicates
mt <- mt %>%
filter(!PIN %in% duplicates.fixed$PIN) %>%
mutate_if(is.factor, as.character) %>%
bind_rows(duplicates.fixed) %>%
mutate(PIN = as.integer(PIN)) %>%
filter(!is.na(PIN))
pos <- lab %>%
left_join(mt, by = 'PIN')
vars <- c(paste0('PosEmp_', 1:7), paste0('IRI_', 1:14), paste0('Lonely_', 1:20), paste0('PANAS_', 1:20))
pos <- pos %>%
gather(key = variable, value = value, !!!syms(c(vars, paste0(vars, '_lab')))) %>% # convert data to long form
mutate(
source = ifelse(str_detect(variable, '_lab'), 'lab', 'mt'), # create a source variable designating each row as coming from mass testing or the in-lab survey
variable = str_replace(variable, '_lab', '') %>%  # get rid of the _lab suffix on in-lab survey variable names so they match the mass testing names
tolower() # make it lowercase
) %>%
spread(key = source, value = value) %>% # for each variable, this creates one column for the mass testing value and one column for the in-lab survey value
mutate(value = ifelse(is.na(mt), lab, mt)) %>% # if the mass testing value is missing, use the in-lab survey; otherwise, use the mass testing value
select(-lab, -mt) %>% # drop the mass testing/in-lab columns and just retain the final value column
spread(key = variable, value = value) # convert the data back to wide form with only a single value per variable
pos <- pos %>%
mutate(
letterfac = factor(recode(letter, `1` = 'positive', `2` = 'negative')),
lettercont = recode(letterfac, positive = 1, negative = -1),
lettercont_cent = lettercont - mean(lettercont, na.rm = TRUE),
perspfac = factor(recode(persp, `1` = 'perspective taking', `2` = 'objective')),
perspcont = recode(perspfac, `perspective taking` = 1, objective = -1),
perspcont_cent = perspcont - mean(perspcont, na.rm = TRUE),
# reverse coding
connect2recode = abs(connect2 - 8),
iri_2rev = abs(iri_2 - 6),
iri_3rev = abs(iri_3 - 6),
iri_7rev = abs(iri_7 - 6),
iri_8rev = abs(iri_8 - 6),
lonely_1rev = abs(lonely_1 - 5),
lonely_5rev = abs(lonely_5 - 5),
lonely_6rev = abs(lonely_6 - 5),
lonely_9rev = abs(lonely_9 - 5),
lonely_10rev = abs(lonely_10 - 5),
lonely_15rev = abs(lonely_15 - 5),
lonely_16rev = abs(lonely_16 - 5),
lonely_19rev = abs(lonely_19 - 5),
lonely_20rev = abs(lonely_20 - 5)
) %>%
rowwise() %>%
mutate(
# compute dependent variables
posemp = mean(c(delighted, uplifted, pleased, joyful, cheerful), na.rm = TRUE),
negemp = mean(c(uncomfortable, pained, bothered, unpleasant, distressed)),
sympathy = mean(c(sympathetic, compassionate), na.rm = TRUE),
targ.connect = mean(c(like, similar, warmth, ios), na.rm = TRUE),
gen.connect = mean(c(connect1, connect2recode, connect3, connect4), na.rm = TRUE),
# compute covariates
iri_pt = mean(c(iri_1, iri_3rev, iri_5, iri_7rev, iri_9, iri_10, iri_12), na.rm = TRUE),
iri_ec = mean(c(iri_2rev, iri_4, iri_6, iri_8rev, iri_11, iri_13, iri_14), na.rm = TRUE),
lonely = mean(c(lonely_1rev, lonely_2, lonely_3, lonely_4, lonely_5rev, lonely_6rev, lonely_7, lonely_8, lonely_9rev, lonely_10rev, lonely_11, lonely_12, lonely_13, lonely_14, lonely_15rev, lonely_16rev, lonely_17, lonely_18, lonely_19rev, lonely_20rev), na.rm = TRUE),
posemp_disp = mean(c(posemp_1, posemp_2, posemp_3, posemp_4, posemp_5, posemp_6, posemp_7), na.rm = TRUE),
panas_pos = mean(c(panas_1, panas_3, panas_5, panas_9, panas_10, panas_12, panas_14, panas_16, panas_17, panas_19), na.rm = TRUE),
panas_neg = mean(c(panas_2, panas_4, panas_6, panas_7, panas_8, panas_11, panas_13, panas_15, panas_18, panas_20), na.rm = TRUE)
) %>%
ungroup() %>%
mutate(
# mean-center the covariates
iri_pt = iri_pt - mean(iri_pt, na.rm = TRUE),
iri_ec = iri_ec - mean(iri_ec, na.rm = TRUE),
lonely = lonely - mean(lonely, na.rm = TRUE),
posemp_disp = posemp_disp - mean(posemp_disp, na.rm = TRUE),
panas_pos = panas_pos - mean(panas_pos, na.rm = TRUE),
panas_neg = panas_neg - mean(panas_neg, na.rm = TRUE),
# compute contrasts
interact.var = interaction(perspfac, letterfac),
pospt.vs.posobj = recode(interact.var, `perspective taking.positive` = 1, `objective.positive` = -1, `perspective taking.negative` = 0, `objective.negative` = 0),
negpt.vs.negobj = recode(interact.var, `perspective taking.positive` = 0, `objective.positive` = 0, `perspective taking.negative` = 1, `objective.negative` = -1),
pos.vs.neg = recode(interact.var, `perspective taking.positive` = 1, `objective.positive` = 1, `perspective taking.negative` = -1, `objective.negative` = -1)
) %>%
filter(!is.na(perspfac), !is.na(letterfac))
pos <- pos %>%
filter(
suspicious != 1,
language_barrier != 1,
failed_letter_check != 1,
failed_perspective_check != 1
)
dim(pos)
persp <- pos  %>%
group_by(perspfac) %>%
summarize(
mean = mean(pt_check, na.rm = TRUE) %>% round(digits = 2),
sd = sd(pt_check, na.rm = TRUE) %>% round(digits = 2)
) %>%
rename(condition = perspfac)
letter <- pos %>%
group_by(letterfac) %>%
summarize(
mean = mean(pt_check, na.rm = TRUE) %>% round(digits = 2),
sd = sd(pt_check, na.rm = TRUE) %>% round(digits = 2)
) %>%
rename(condition = letterfac)
pt_check.descriptives <- bind_rows(persp, letter)
persp
letter <- pos %>%
group_by(letterfac) %>%
summarize(
mean = mean(pt_check, na.rm = TRUE) %>% round(digits = 2),
sd = sd(pt_check, na.rm = TRUE) %>% round(digits = 2)
) %>%
rename(condition = letterfac)
letter
pt_check.descriptives <- bind_rows(persp, letter)
pt_check.model <- lm(pt_check ~ lettercont_cent * perspcont_cent, data = pos)
pt_check.results <- pt_check.model %>%
tidy() %>%
mutate(
estimate = round(estimate, 2),
std.error = round(std.error, 2),
statistic = abs(round(statistic, 2)),
p.value = round(p.value, 3)
)
pt_check.results
posemp.allmeans <- pos %>%
filter(!is.na(perspfac), !is.na(letterfac)) %>%
group_by(perspfac, letterfac) %>%
summarize(
mean = mean(posemp, na.rm = TRUE) %>% round(digits = 2),
sd = sd(posemp, na.rm = TRUE) %>% round(digits = 2)
)
posemp.allmeans
posemp.allmeans <- pos %>%
filter(!is.na(perspfac), !is.na(letterfac)) %>%
group_by(perspfac, letterfac) %>%
summarize(
mean = mean(posemp, na.rm = TRUE) %>% round(digits = 2),
sd = sd(posemp, na.rm = TRUE) %>% round(digits = 2)
)
posemp.cont.model <- lm(posemp ~ (pospt.vs.posobj + negpt.vs.negobj + pos.vs.neg) + (posemp_disp + iri_pt + iri_ec + lonely), data = pos)
posemp.cont.results <- posemp.cont.model %>%
tidy() %>%
mutate(
estimate = round(estimate, 2),
std.error = round(std.error, 2),
statistic = abs(round(statistic, 2)),
p.value = round(p.value, 3)
)
print(posemp.cont.model$df.residual)
print(posemp.cont.results)
newdata <- tibble(
pospt.vs.posobj = c(1, -1, 0, 0),
negpt.vs.negobj = c(0, 0, 1, -1),
pos.vs.neg = c(1, 1, -1, -1),
posemp_disp = rep(mean(pos$posemp_disp, na.rm = TRUE), 4),
iri_pt = rep(mean(pos$iri_pt, na.rm = TRUE), 4),
iri_ec = rep(mean(pos$iri_ec, na.rm = TRUE), 4),
lonely = rep(mean(pos$lonely, na.rm = TRUE), 4)
)
predictions <- predict(posemp.cont.model, newdata, se.fit = TRUE)
posemp.allmeans <- tibble(
letterfac = factor(c('positive', 'positive', 'negative', 'negative')),
perspfac = factor(c('perspective taking', 'objective', 'perspective taking', 'objective')),
mean = predictions$fit %>% round(2),
sd = predictions$se.fit %>% round(2)
)
print(posemp.allmeans)
posemp.allmeans
